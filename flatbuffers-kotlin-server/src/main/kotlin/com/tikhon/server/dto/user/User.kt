// automatically generated by the FlatBuffers compiler, do not modify

package dto.user

import java.nio.*
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class User : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : User {
        __init(_i, _bb)
        return this
    }
    val id : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val gender : Byte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val age : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsUser(_bb: ByteBuffer): User = getRootAsUser(_bb, User())
        fun getRootAsUser(_bb: ByteBuffer, obj: User): User {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUser(builder: FlatBufferBuilder, id: Int, nameOffset: Int, gender: Byte, age: Int) : Int {
            builder.startTable(4)
            addAge(builder, age)
            addName(builder, nameOffset)
            addId(builder, id)
            addGender(builder, gender)
            return endUser(builder)
        }
        fun startUser(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addInt(0, id, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addGender(builder: FlatBufferBuilder, gender: Byte) = builder.addByte(2, gender, 0)
        fun addAge(builder: FlatBufferBuilder, age: Int) = builder.addInt(3, age, 0)
        fun endUser(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishUserBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedUserBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
